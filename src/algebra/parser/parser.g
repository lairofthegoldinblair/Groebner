header {
	package algebra.parser;
}

options {
	mangleLiteralPrefix = "TK_";
}

{
import java.io.*;
}

class AlgebraParser extends Parser;
options {
	k = 3;
	importVocab=Algebra; // use vocab generated by lexer
	buildAST = true;
    defaultErrorHandler=false;
}

// The token types correspond to nodes in the abstract syntax
tokens {
	COEFF;
    MONOMIAL;
	POLYNOMIAL;
	SINGLEVARMONOMIAL;
	TERM;
	MODULE;
}

element
  :
  module
  |
  polynomial
  ;

module
  :
  LCURLY! polynomial (COMMA! polynomial)* RCURLY! { ## = #([MODULE, "MODULE"], ##); }
  ;

polynomial
  :	
	term (PLUS! term)* { ## = #([POLYNOMIAL, "POLYNOMIAL"], ##); }
  ;

term
{
	boolean isLoneCoeff=true;
}
  :
	(
			c:coeff (s:STAR^ monomial { isLoneCoeff = false; #s.setType(TERM); })? 
			{
				if(isLoneCoeff)
				{
					## = #([TERM, "*"], c, [MONOMIAL, "MONOMIAL"]);
				}
			}
		|
			m:monomial { ## = #([TERM, "*"], #([COEFF, "COEFF"], [NUM, "1"], [NUM, "1"]), m); }
    )
  ;

coeff
{
	boolean isQuotient=false;
}
  :
		(
			LPAREN! numeric (s:SLASH^ numeric { isQuotient = true; #s.setType(COEFF); })? RPAREN! 
			{
				if (!isQuotient)
				{
					## = #([COEFF, "/"], ##, [NUM, "1"]);
				}
			}
		|
			numeric { ## = #([COEFF, "/"], ##, [NUM, "1"]); }
		) 
  ;

monomial
  :
	singleVariableMonomial (STAR! singleVariableMonomial)* { ## = #([MONOMIAL, "MONOMIAL"], ##); }
  ;

singleVariableMonomial
{
	boolean hasExplicitExponent=false;
}
	:
		v:variable (c:CARET^ numeric { hasExplicitExponent = true; #c.setType(SINGLEVARMONOMIAL); })? 
		{
			if (!hasExplicitExponent)
			{
				## = #([SINGLEVARMONOMIAL, "^"], v, [NUM, "1"]);
			}
		}
	;

variable
  :
		ID
  ;

numeric
  :
	(
	  MINUS! NUM { ##.setText("-" + ##.getText()); }
	|
	  NUM
	)
  ;



class AlgebraBuilder extends TreeParser;
options {
	importVocab=AlgebraParser; // use vocab generated by lexer
}
{
	private algebra.PolynomialBuilder mBuilder;
	public void setPolynomialBuilder(algebra.PolynomialBuilder builder)
	{
		mBuilder = builder;
	}

	public algebra.PolynomialBuilder getPolynomialBuilder()
	{
		return mBuilder;
	}
}

element 
   :
   module
   |
   polynomial
   ;

module
   :
        #(MODULE (polynomial)*) { mBuilder.buildModule(); }
   ;

polynomial
	:
		#(POLYNOMIAL (term)*) { mBuilder.buildPolynomial(); }
	;

term
	:
		#(TERM coeff monomial) { mBuilder.buildTerm(); }
	;

monomial
	:
		#(MONOMIAL (singleVarMonomial)*) { mBuilder.buildMonomial(); }
	;

singleVarMonomial
	:
		#(SINGLEVARMONOMIAL id:ID num:NUM) 
		{ 
			mBuilder.buildSingleVariableMonomial(algebra.Symbol.create(#id.getText()), Integer.parseInt(#num.getText()));
		}
	;

coeff
	:
		#(COEFF num1:NUM num2:NUM)
		{
			mBuilder.buildCoefficient(Integer.parseInt(#num1.getText()), Integer.parseInt(#num2.getText())); 
		}
	;

